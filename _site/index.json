{
  "api/Tamato.GaifaGoap.AgentDefinition.html": {
    "href": "api/Tamato.GaifaGoap.AgentDefinition.html",
    "title": "Class AgentDefinition | Gaifa API documentation",
    "keywords": "Class AgentDefinition Base class AgentDefinition<T> . Use as a target for custom inspector. Inheritance Object Object ScriptableObject AgentDefinition AgentDefinition <T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class AgentDefinition : ScriptableObject"
  },
  "api/Tamato.GaifaGoap.AgentDefinition-1.html": {
    "href": "api/Tamato.GaifaGoap.AgentDefinition-1.html",
    "title": "Class AgentDefinition<T> | Gaifa API documentation",
    "keywords": "Class AgentDefinition<T> AgentDefinition contains lists of possible actions and goals that are used to instantiate PlanController . Inheritance Object Object ScriptableObject AgentDefinition AgentDefinition<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class AgentDefinition<T> : AgentDefinition where T : class, IModel<T> Type Parameters Name Description T Model Fields gameActions Declaration [SerializeField] protected List<GameAction<T>> gameActions Field Value Type Description List < GameAction <T>> goals Declaration [SerializeField] protected List<Goal<T>> goals Field Value Type Description List < Goal <T>> parameterizedActions Declaration [SerializeField] protected List<ParameterizedActionFactory<T>> parameterizedActions Field Value Type Description List < ParameterizedActionFactory <T>> Methods CopyAction(GameObject) Instantiate and Initialize each GameAction<T> . Declaration public List<IGameAction<T>> CopyAction(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own the game action instance. Returns Type Description List < IGameAction <T>> List of instantiated game actions. CopyGoals(GameObject) Instantiate and Initialize each Goal<T> . Declaration public List<IGoal<T>> CopyGoals(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own the goal instance. Returns Type Description List < IGoal <T>> List of instantiated goals. CopyParameterizedAction(GameObject) Instantiate and Initialize each ParameterizedActionFactory<T> . Declaration public List<ParameterizedActionFactory<T>> CopyParameterizedAction(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own the factory instance. Returns Type Description List < ParameterizedActionFactory <T>> List of instantiated factories."
  },
  "api/Tamato.GaifaGoap.AIAgent-1.html": {
    "href": "api/Tamato.GaifaGoap.AIAgent-1.html",
    "title": "Class AIAgent<T> | Gaifa API documentation",
    "keywords": "Class AIAgent<T> The agent that interact with the game. Inheritance Object Object Component Behaviour MonoBehaviour AIAgent<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public abstract class AIAgent<T> : MonoBehaviour where T : class, IModel<T> Type Parameters Name Description T Model Properties ModelFactory Gets a function that return a new instance of a specify model. Declaration public abstract Func<T> ModelFactory { get; } Property Value Type Description Func <T> Methods GetCurrentModel() Get a model that represent the current world state . Declaration public abstract T GetCurrentModel() Returns Type Description T"
  },
  "api/Tamato.GaifaGoap.AStarFrontier-1.html": {
    "href": "api/Tamato.GaifaGoap.AStarFrontier-1.html",
    "title": "Class AStarFrontier<T> | Gaifa API documentation",
    "keywords": "Class AStarFrontier<T> Data Structure for storing nodes using priority queue with PathCost + Heuristic as a priority value. Mostly use in planning. Inheritance Object AStarFrontier<T> Implements IFrontier <T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class AStarFrontier<T> : IFrontier<T> where T : class, IModel<T> Type Parameters Name Description T Model Constructors AStarFrontier() Declaration public AStarFrontier() Properties IsEmpty Gets a value indicate that Frontier is empty or not. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean Methods Add(Node<T>) Add a node to the frontier. Declaration public void Add(Node<T> node) Parameters Type Name Description Node <T> node Clear() Clear the frontier to empty. Declaration public void Clear() Next() Gets a next node in the frontier. Declaration public Node<T> Next() Returns Type Description Node <T> Implements IFrontier<T>"
  },
  "api/Tamato.GaifaGoap.DelegatePooledObjectPolicy-1.html": {
    "href": "api/Tamato.GaifaGoap.DelegatePooledObjectPolicy-1.html",
    "title": "Class DelegatePooledObjectPolicy<T> | Gaifa API documentation",
    "keywords": "Class DelegatePooledObjectPolicy<T> Pooled Object Policy that accept delegate for Create() method and Return(T) method Inheritance Object PooledObjectPolicy <T> DelegatePooledObjectPolicy<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class DelegatePooledObjectPolicy<T> : PooledObjectPolicy<T>, IPooledObjectPolicy<T> where T : class Type Parameters Name Description T Pooled Object Constructors DelegatePooledObjectPolicy(Func<T>, Action<T>) Declaration public DelegatePooledObjectPolicy(Func<T> createFactory, Action<T> onReturn = null) Parameters Type Name Description Func <T> createFactory Action <T> onReturn Methods Create() Declaration public override T Create() Returns Type Description T Overrides Microsoft.Extensions.ObjectPool.PooledObjectPolicy<T>.Create() Return(T) Declaration public override bool Return(T obj) Parameters Type Name Description T obj Returns Type Description Boolean Overrides Microsoft.Extensions.ObjectPool.PooledObjectPolicy<T>.Return(T)"
  },
  "api/Tamato.GaifaGoap.GameAction-1.html": {
    "href": "api/Tamato.GaifaGoap.GameAction-1.html",
    "title": "Class GameAction<T> | Gaifa API documentation",
    "keywords": "Class GameAction<T> Serializable action Inheritance Object Object ScriptableObject GameAction<T> Implements IGameAction <T> IGameObjectInitializable Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public abstract class GameAction<T> : ScriptableObject, IGameAction<T>, IGameObjectInitializable where T : class, IModel<T> Type Parameters Name Description T Model Properties ActionName Gets a name of this action. Declaration public virtual string ActionName { get; } Property Value Type Description String Methods CheckContextPrecondition() Check if current world state satisfy real-time precondition. Declaration public virtual bool CheckContextPrecondition() Returns Type Description Boolean Initialize(GameObject) Initialize this object Declaration public virtual void Initialize(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own this object RunAction(T, InterruptReceiver, CancellationToken) Execute this action. Declaration public abstract UniTask<bool> RunAction(T model, InterruptReceiver interruptReceiver, CancellationToken onDestroyCancellationToken) Parameters Type Name Description T model Model after execute TakeAction(T) method. InterruptReceiver interruptReceiver Receiver use to receive plan interruption signal from external source. CancellationToken onDestroyCancellationToken Token use to cancel this action when the agent is destroyed. Returns Type Description Cysharp.Threading.Tasks.UniTask < Boolean > True if the action execute successfully, otherwise false. TakeAction(T) Check if the model's state can satisfy the precondition, then Transform the model's state based on the effect of this action. Declaration public abstract (bool success, float cost) TakeAction(T model) Parameters Type Name Description T model Returns Type Description ValueTuple < Boolean , Single > (Success, Cost) Success = True if state satisfy the precondition and state is changed, otherwise false. Cost = cost of this action, it's ignored if success is false. Implements IGameAction<T> IGameObjectInitializable"
  },
  "api/Tamato.GaifaGoap.Goal-1.html": {
    "href": "api/Tamato.GaifaGoap.Goal-1.html",
    "title": "Class Goal<T> | Gaifa API documentation",
    "keywords": "Class Goal<T> Serializable goal Inheritance Object Object ScriptableObject Goal<T> Implements IGoal <T> IGameObjectInitializable Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public abstract class Goal<T> : ScriptableObject, IGoal<T>, IGameObjectInitializable where T : class, IModel<T> Type Parameters Name Description T Model Properties IsConsistentHeuristic Gets a value indicating whether a heuristic function is consistent. Declaration public virtual bool IsConsistentHeuristic { get; } Property Value Type Description Boolean Remarks If this value is true, the associated model's GetHashCode() method must be overriden. See Consistent Heuristic for more information. Methods ActivateGoal() Activate is called after planning finish but before plan execution start. Declaration public virtual void ActivateGoal() ComputeGoalRelevance() Compute the relevance of the goal based on current world state. Negative or Zero relevance mean this goal should not be selected by the planner. Declaration public abstract float ComputeGoalRelevance() Returns Type Description Single Relevance value ComputeHeuristic(T) Compute a heuristic value from a model's state. Declaration public virtual float ComputeHeuristic(T model) Parameters Type Name Description T model Returns Type Description Single heuristic Remarks See Heuristic for more information. Initialize(GameObject) Initialize this object Declaration public virtual void Initialize(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own this object Match(T) Determine whether a model's state satisfy the goal requirement. Declaration public abstract bool Match(T model) Parameters Type Name Description T model Returns Type Description Boolean True if a model satisfy the goal, otherwise false. Implements IGoal<T> IGameObjectInitializable"
  },
  "api/Tamato.GaifaGoap.html": {
    "href": "api/Tamato.GaifaGoap.html",
    "title": "Namespace Tamato.GaifaGoap | Gaifa API documentation",
    "keywords": "Namespace Tamato.GaifaGoap Classes AgentDefinition Base class AgentDefinition<T> . Use as a target for custom inspector. AgentDefinition<T> AgentDefinition contains lists of possible actions and goals that are used to instantiate PlanController . AIAgent<T> The agent that interact with the game. AStarFrontier<T> Data Structure for storing nodes using priority queue with PathCost + Heuristic as a priority value. Mostly use in planning. DelegatePooledObjectPolicy<T> Pooled Object Policy that accept delegate for Create() method and Return(T) method GameAction<T> Serializable action Goal<T> Serializable goal InterruptChannel Send and receive plan interruption signal. InterruptReceiver Receiver side of the InterruptChannel . InterruptSender Sender side of the InterruptChannel . MultiFramePlanner<T> MultiFramePlanner is a planner that spread the work over multiple frames. Node<T> Node data used in planning. ParameterizedActionFactory<T> Factory that produce IGameAction<T> . PlanController Base class PlanController<T> . Use as a target for custom inspector. PlanController<T> Control plan scheduling and plan execution of the agent. PlanExecutor<T> Execute and cancel the plan. PlannerSettings Settings for IPlanner<T> Pool Methods to create object pool ReturnOnlyPooledObjectPolicy<T> Pooled Object Policy that accept delegate for Return(T) method SerializableTimespan Wrapper for TimeSpan to make it serializable by Unity, as well as provide a custom inspector it. ThreadPoolPlanner<T> ThreadPoolPlanner is a planner that shift the work to the thread pool, so it won't halt the main thread and cause drop the FPS. Structs PlannerStats Statistic information of planning process. Interfaces IFrontier<T> Data Structure for storing nodes. Mostly use in planning. IGameAction<T> Action of the agent IGameObjectInitializable IGoal<T> Goal of the agent IModel<T> Contains world states representation for the planner IPlanner<T> Create a plan for the agent from the set of actions, goal and model's state Enums PlannerStatus PlannerType TimeUnit"
  },
  "api/Tamato.GaifaGoap.IFrontier-1.html": {
    "href": "api/Tamato.GaifaGoap.IFrontier-1.html",
    "title": "Interface IFrontier<T> | Gaifa API documentation",
    "keywords": "Interface IFrontier<T> Data Structure for storing nodes. Mostly use in planning. Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IFrontier<T> where T : class, IModel<T> Type Parameters Name Description T Model Properties IsEmpty Gets a value indicate that Frontier is empty or not. Declaration bool IsEmpty { get; } Property Value Type Description Boolean Methods Add(Node<T>) Add a node to the frontier. Declaration void Add(Node<T> node) Parameters Type Name Description Node <T> node Clear() Clear the frontier to empty. Declaration void Clear() Next() Gets a next node in the frontier. Declaration Node<T> Next() Returns Type Description Node <T>"
  },
  "api/Tamato.GaifaGoap.IGameAction-1.html": {
    "href": "api/Tamato.GaifaGoap.IGameAction-1.html",
    "title": "Interface IGameAction<T> | Gaifa API documentation",
    "keywords": "Interface IGameAction<T> Action of the agent Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IGameAction<in T> where T : class, IModel<T> Type Parameters Name Description T Model Properties ActionName Gets a name of this action. Declaration string ActionName { get; } Property Value Type Description String Methods CheckContextPrecondition() Check if current world state satisfy real-time precondition. Declaration bool CheckContextPrecondition() Returns Type Description Boolean RunAction(T, InterruptReceiver, CancellationToken) Execute this action. Declaration UniTask<bool> RunAction(T model, InterruptReceiver interruptReceiver, CancellationToken onDestroyCancellationToken) Parameters Type Name Description T model Model after execute TakeAction(T) method. InterruptReceiver interruptReceiver Receiver use to receive plan interruption signal from external source. CancellationToken onDestroyCancellationToken Token use to cancel this action when the agent is destroyed. Returns Type Description Cysharp.Threading.Tasks.UniTask < Boolean > True if the action execute successfully, otherwise false. TakeAction(T) Check if the model's state can satisfy the precondition, then Transform the model's state based on the effect of this action. Declaration (bool success, float cost) TakeAction(T model) Parameters Type Name Description T model Returns Type Description ValueTuple < Boolean , Single > (Success, Cost) Success = True if state satisfy the precondition and state is changed, otherwise false. Cost = cost of this action, it's ignored if success is false."
  },
  "api/Tamato.GaifaGoap.IGameObjectInitializable.html": {
    "href": "api/Tamato.GaifaGoap.IGameObjectInitializable.html",
    "title": "Interface IGameObjectInitializable | Gaifa API documentation",
    "keywords": "Interface IGameObjectInitializable Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IGameObjectInitializable Methods Initialize(GameObject) Initialize this object Declaration void Initialize(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own this object"
  },
  "api/Tamato.GaifaGoap.IGoal-1.html": {
    "href": "api/Tamato.GaifaGoap.IGoal-1.html",
    "title": "Interface IGoal<T> | Gaifa API documentation",
    "keywords": "Interface IGoal<T> Goal of the agent Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IGoal<in T> where T : class, IModel<T> Type Parameters Name Description T Model Properties IsConsistentHeuristic Gets a value indicating whether a heuristic function is consistent. Declaration bool IsConsistentHeuristic { get; } Property Value Type Description Boolean Remarks If this value is true, the associated model's GetHashCode() method must be overriden. See Consistent Heuristic for more information. Methods ActivateGoal() Activate is called after planning finish but before plan execution start. Declaration void ActivateGoal() ComputeGoalRelevance() Compute the relevance of the goal based on current world state. Negative or Zero relevance mean this goal should not be selected by the planner. Declaration float ComputeGoalRelevance() Returns Type Description Single Relevance value ComputeHeuristic(T) Compute a heuristic value from a model's state. Declaration float ComputeHeuristic(T model) Parameters Type Name Description T model Returns Type Description Single heuristic Remarks See Heuristic for more information. Match(T) Determine whether a model's state satisfy the goal requirement. Declaration bool Match(T model) Parameters Type Name Description T model Returns Type Description Boolean True if a model satisfy the goal, otherwise false."
  },
  "api/Tamato.GaifaGoap.IModel-1.html": {
    "href": "api/Tamato.GaifaGoap.IModel-1.html",
    "title": "Interface IModel<T> | Gaifa API documentation",
    "keywords": "Interface IModel<T> Contains world states representation for the planner Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IModel<in T> where T : class Type Parameters Name Description T Derived Model Remarks For the performance and the correctness, the derived model class should override Equals and GetHashCode to provide fast (since they will be called frequently) and correct result, except when IsConsistentHeuristic of the specified goal is false. Methods CopyTo(T) Copy model's state to an another model. Declaration void CopyTo(T otherModel) Parameters Type Name Description T otherModel Destination model Reset() Reset model's state to default value. Declaration void Reset()"
  },
  "api/Tamato.GaifaGoap.InterruptChannel.html": {
    "href": "api/Tamato.GaifaGoap.InterruptChannel.html",
    "title": "Class InterruptChannel | Gaifa API documentation",
    "keywords": "Class InterruptChannel Send and receive plan interruption signal. Inheritance Object InterruptChannel Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class InterruptChannel Constructors InterruptChannel() Declaration public InterruptChannel() Properties Receiver Gets a receiver that use to receive signal from sender of this channel. Declaration public InterruptReceiver Receiver { get; } Property Value Type Description InterruptReceiver Sender Gets a sender that use to send signal to this channel. Declaration public InterruptSender Sender { get; } Property Value Type Description InterruptSender Methods ClearChannelQueue() Clear remaining interruption signals from this channel. Declaration public void ClearChannelQueue() Operators Implicit(InterruptChannel to InterruptReceiver) Declaration public static implicit operator InterruptReceiver(InterruptChannel channel) Parameters Type Name Description InterruptChannel channel Returns Type Description InterruptReceiver Implicit(InterruptChannel to InterruptSender) Declaration public static implicit operator InterruptSender(InterruptChannel channel) Parameters Type Name Description InterruptChannel channel Returns Type Description InterruptSender"
  },
  "api/Tamato.GaifaGoap.InterruptReceiver.html": {
    "href": "api/Tamato.GaifaGoap.InterruptReceiver.html",
    "title": "Class InterruptReceiver | Gaifa API documentation",
    "keywords": "Class InterruptReceiver Receiver side of the InterruptChannel . Inheritance Object InterruptReceiver Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public sealed class InterruptReceiver Constructors InterruptReceiver(ChannelReader<Boolean>) Declaration public InterruptReceiver(ChannelReader<bool> reader) Parameters Type Name Description Cysharp.Threading.Tasks.ChannelReader < Boolean > reader Methods ReadInterruptionSignal() Read an interruption signal from the channel. Declaration public bool ReadInterruptionSignal() Returns Type Description Boolean True if there is interruption in the channel WaitForInterruptionSignal(CancellationToken) Wait for an interruption signal. Declaration public UniTask WaitForInterruptionSignal(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Cysharp.Threading.Tasks.UniTask"
  },
  "api/Tamato.GaifaGoap.InterruptSender.html": {
    "href": "api/Tamato.GaifaGoap.InterruptSender.html",
    "title": "Class InterruptSender | Gaifa API documentation",
    "keywords": "Class InterruptSender Sender side of the InterruptChannel . Inheritance Object InterruptSender Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public sealed class InterruptSender Constructors InterruptSender(ChannelWriter<Boolean>) Declaration public InterruptSender(ChannelWriter<bool> writer) Parameters Type Name Description Cysharp.Threading.Tasks.ChannelWriter < Boolean > writer Methods Complete(Exception) Complete and Close the channel. Declaration public void Complete(Exception error = null) Parameters Type Name Description Exception error Exception to raise when the channel complete due to exception. Exceptions Type Condition Cysharp.Threading.Tasks.ChannelClosedException channel is already closed. TryComplete(Exception) Complete and Close the channel. Declaration public bool TryComplete(Exception error = null) Parameters Type Name Description Exception error Exception to raise when the channel complete due to exception. Returns Type Description Boolean True if channel is closed successfully. TrySendInterruptionSignal() Send an interruption signal to the channel. Declaration public bool TrySendInterruptionSignal() Returns Type Description Boolean True if channel is not complete and signal is sent successfully, otherwise false."
  },
  "api/Tamato.GaifaGoap.IPlanner-1.html": {
    "href": "api/Tamato.GaifaGoap.IPlanner-1.html",
    "title": "Interface IPlanner<T> | Gaifa API documentation",
    "keywords": "Interface IPlanner<T> Create a plan for the agent from the set of actions, goal and model's state Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public interface IPlanner<T> where T : class, IModel<T> Type Parameters Name Description T Model Properties DefaultSettings Gets a planner's default setting Declaration PlannerSettings DefaultSettings { get; } Property Value Type Description PlannerSettings IsPlanning Gets a value indicate whether the planner is busy or not. Declaration bool IsPlanning { get; } Property Value Type Description Boolean Methods Cancel() Cancel the planner and wait for it. Declaration UniTask Cancel() Returns Type Description Cysharp.Threading.Tasks.UniTask Exceptions Type Condition InvalidOperationException Planner is idle. Plan(T, List<IGameAction<T>>, IGoal<T>, PlannerSettings) Create a plan. Declaration UniTask<(Node<T> goalNode, PlannerStats stats)> Plan(T initialModel, List<IGameAction<T>> possibleActions, IGoal<T> goal, PlannerSettings settings = null) Parameters Type Name Description T initialModel Model of the current world state. List < IGameAction <T>> possibleActions List of possible actions for the agent. IGoal <T> goal Goal of the agent. PlannerSettings settings If provided, the planner's default settings will be overriden with this settings for this call only. Returns Type Description Cysharp.Threading.Tasks.UniTask < ValueTuple < Node <T>, PlannerStats >> (goalNode, stats) goalNode = node that satisfy the goal. stats = statistic information of a planner."
  },
  "api/Tamato.GaifaGoap.MultiFramePlanner-1.html": {
    "href": "api/Tamato.GaifaGoap.MultiFramePlanner-1.html",
    "title": "Class MultiFramePlanner<T> | Gaifa API documentation",
    "keywords": "Class MultiFramePlanner<T> MultiFramePlanner is a planner that spread the work over multiple frames. Inheritance Object MultiFramePlanner<T> Implements IPlanner <T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class MultiFramePlanner<T> : IPlanner<T> where T : class, IModel<T> Type Parameters Name Description T Model Constructors MultiFramePlanner(PlannerSettings, Func<T>) Declaration public MultiFramePlanner(PlannerSettings defaultSettings, Func<T> modelFactory) Parameters Type Name Description PlannerSettings defaultSettings Func <T> modelFactory Properties DefaultSettings Gets a planner's default setting Declaration public PlannerSettings DefaultSettings { get; } Property Value Type Description PlannerSettings IsPlanning Gets a value indicate whether the planner is busy or not. Declaration public bool IsPlanning { get; } Property Value Type Description Boolean Methods Cancel() Cancel the planner and wait for it. Declaration public UniTask Cancel() Returns Type Description Cysharp.Threading.Tasks.UniTask Exceptions Type Condition InvalidOperationException Planner is idle. Plan(T, List<IGameAction<T>>, IGoal<T>, PlannerSettings) Create a plan. Declaration public UniTask<(Node<T> goalNode, PlannerStats stats)> Plan(T initialModel, List<IGameAction<T>> possibleActions, IGoal<T> goal, PlannerSettings settings = null) Parameters Type Name Description T initialModel Model of the current world state. List < IGameAction <T>> possibleActions List of possible actions for the agent. IGoal <T> goal Goal of the agent. PlannerSettings settings If provided, the planner's default settings will be overriden with this settings for this call only. Returns Type Description Cysharp.Threading.Tasks.UniTask < ValueTuple < Node <T>, PlannerStats >> (goalNode, stats) goalNode = node that satisfy the goal. stats = statistic information of a planner. Implements IPlanner<T>"
  },
  "api/Tamato.GaifaGoap.Node-1.html": {
    "href": "api/Tamato.GaifaGoap.Node-1.html",
    "title": "Class Node<T> | Gaifa API documentation",
    "keywords": "Class Node<T> Node data used in planning. Inheritance Object Node<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class Node<T> where T : class, IModel<T> Type Parameters Name Description T Model Properties Action Declaration public IGameAction<T> Action { get; } Property Value Type Description IGameAction <T> Cost Declaration public float Cost { get; } Property Value Type Description Single Heuristic Declaration public float Heuristic { get; } Property Value Type Description Single Parent Declaration public Node<T> Parent { get; } Property Value Type Description Node <T> PathCost Declaration public float PathCost { get; } Property Value Type Description Single State Declaration public T State { get; } Property Value Type Description T Methods Initialize(T, IGameAction<T>, Node<T>, Single, Single) Initialize a node with parameter values. Declaration public void Initialize(T state, IGameAction<T> action, Node<T> parent, float cost, float heuristic) Parameters Type Name Description T state IGameAction <T> action Node <T> parent Single cost Single heuristic Reset() Reset a node to default values. Declaration public void Reset()"
  },
  "api/Tamato.GaifaGoap.ParameterizedActionFactory-1.html": {
    "href": "api/Tamato.GaifaGoap.ParameterizedActionFactory-1.html",
    "title": "Class ParameterizedActionFactory<T> | Gaifa API documentation",
    "keywords": "Class ParameterizedActionFactory<T> Factory that produce IGameAction<T> . Inheritance Object Object ScriptableObject ParameterizedActionFactory<T> Implements IGameObjectInitializable Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public abstract class ParameterizedActionFactory<T> : ScriptableObject, IGameObjectInitializable where T : class, IModel<T> Type Parameters Name Description T Model Methods GetParameterizedActions() Gets actions from factory. Declaration public abstract IEnumerable<IGameAction<T>> GetParameterizedActions() Returns Type Description IEnumerable < IGameAction <T>> Actions that are produced by factory. Initialize(GameObject) Initialize this object Declaration public abstract void Initialize(GameObject owner) Parameters Type Name Description GameObject owner GameObject that own this object Implements IGameObjectInitializable"
  },
  "api/Tamato.GaifaGoap.PlanController.html": {
    "href": "api/Tamato.GaifaGoap.PlanController.html",
    "title": "Class PlanController | Gaifa API documentation",
    "keywords": "Class PlanController Base class PlanController<T> . Use as a target for custom inspector. Inheritance Object Object Component Behaviour MonoBehaviour PlanController PlanController <T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public abstract class PlanController : MonoBehaviour"
  },
  "api/Tamato.GaifaGoap.PlanController-1.html": {
    "href": "api/Tamato.GaifaGoap.PlanController-1.html",
    "title": "Class PlanController<T> | Gaifa API documentation",
    "keywords": "Class PlanController<T> Control plan scheduling and plan execution of the agent. Inheritance Object Object Component Behaviour MonoBehaviour PlanController PlanController<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class PlanController<T> : PlanController where T : class, IModel<T> Type Parameters Name Description T Model Fields agent Declaration [SerializeField] protected AIAgent<T> agent Field Value Type Description AIAgent <T> agentDefinition Declaration [SerializeField] protected AgentDefinition<T> agentDefinition Field Value Type Description AgentDefinition <T> autoUpdate Declaration [SerializeField] protected bool autoUpdate Field Value Type Description Boolean enableTracker Declaration [SerializeField] protected bool enableTracker Field Value Type Description Boolean onExecutionFinish Declaration [SerializeField] protected UnityEvent<bool> onExecutionFinish Field Value Type Description UnityEvent < Boolean > onPlanningFinish Declaration [SerializeField] protected UnityEvent<PlannerStats> onPlanningFinish Field Value Type Description UnityEvent < PlannerStats > planExecutionLength Declaration [SerializeField] protected int planExecutionLength Field Value Type Description Int32 plannerType Declaration [SerializeField] protected PlannerType plannerType Field Value Type Description PlannerType settings Declaration [SerializeField] protected PlannerSettings settings Field Value Type Description PlannerSettings warnNoGoal Declaration [SerializeField] protected bool warnNoGoal Field Value Type Description Boolean Properties Agent Gets the agent that associate with this controller. Declaration public AIAgent<T> Agent { get; } Property Value Type Description AIAgent <T> AgentActions Gets a list of possible actions for the agent. Declaration public List<IGameAction<T>> AgentActions { get; } Property Value Type Description List < IGameAction <T>> AgentDefinition Gets definition of the agent. Declaration public AgentDefinition<T> AgentDefinition { get; } Property Value Type Description AgentDefinition <T> AgentGoals Gets a list of possible goals for the agent. Declaration public List<IGoal<T>> AgentGoals { get; } Property Value Type Description List < IGoal <T>> AgentParameterizedActions Gets a list of possible parameterized actions for the agent. Declaration public List<ParameterizedActionFactory<T>> AgentParameterizedActions { get; } Property Value Type Description List < ParameterizedActionFactory <T>> AutoUpdate Gets or sets a value indicating whether a controller should schedule next planning automatically when the agent is idle. Declaration public bool AutoUpdate { get; set; } Property Value Type Description Boolean Executor Declaration public PlanExecutor<T> Executor { get; } Property Value Type Description PlanExecutor <T> IsExecutingAction Gets a value indicating whether the agent is executing any action. Declaration public bool IsExecutingAction { get; } Property Value Type Description Boolean IsIdle Gets a value indicating whether the controller is idle (not planning or executing a plan). Declaration public bool IsIdle { get; } Property Value Type Description Boolean IsPlanning Gets a value indicating whether the planner is planning. Declaration public bool IsPlanning { get; } Property Value Type Description Boolean OnExecutionFinish Gets a event that invoke when the plan execution finish. Declaration public UnityEvent<bool> OnExecutionFinish { get; } Property Value Type Description UnityEvent < Boolean > OnPlanningFinish Gets a event that invoke when the planner finish. Declaration public UnityEvent<PlannerStats> OnPlanningFinish { get; } Property Value Type Description UnityEvent < PlannerStats > PlanExecutionLength Gets or sets a maximum number of an action that will get executed before the execution stop. Declaration public int PlanExecutionLength { get; set; } Property Value Type Description Int32 Planner Gets a planner of the agent. Declaration public IPlanner<T> Planner { get; } Property Value Type Description IPlanner <T> PlannerType Gets a type of the planner for this controller. Declaration public PlannerType PlannerType { get; } Property Value Type Description PlannerType Settings Gets a planner's settings for this controller. Declaration public PlannerSettings Settings { get; } Property Value Type Description PlannerSettings Methods SchedulePlanner() Schedule the planer and the executor. If the agent is planning or executing any action, it will send the interruption signal and wait for the planner or the executor to finish. Declaration public bool SchedulePlanner() Returns Type Description Boolean True if the scheduling is success, false if there are no possible goals for the agent."
  },
  "api/Tamato.GaifaGoap.PlanExecutor-1.html": {
    "href": "api/Tamato.GaifaGoap.PlanExecutor-1.html",
    "title": "Class PlanExecutor<T> | Gaifa API documentation",
    "keywords": "Class PlanExecutor<T> Execute and cancel the plan. Inheritance Object PlanExecutor<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class PlanExecutor<T> where T : class, IModel<T> Type Parameters Name Description T Model Constructors PlanExecutor(CancellationToken) Declaration public PlanExecutor(CancellationToken onDestroyCancellationToken) Parameters Type Name Description CancellationToken onDestroyCancellationToken Properties CurrentAction Gets a current action of the agent. Declaration public IGameAction<T> CurrentAction { get; protected set; } Property Value Type Description IGameAction <T> CurrentActionIndex Gets a index of an action that is executing. Declaration public int CurrentActionIndex { get; protected set; } Property Value Type Description Int32 IsExecutingAction Gets a value indicating whether the agent is executing any action. Declaration public bool IsExecutingAction { get; protected set; } Property Value Type Description Boolean IsInterruptionRequest Gets a value indicating there is any interruption signal from external source. Declaration public bool IsInterruptionRequest { get; protected set; } Property Value Type Description Boolean Methods CompleteInterruptChannel() Complete and close interruption channel Declaration public void CompleteInterruptChannel() Exceptions Type Condition Cysharp.Threading.Tasks.ChannelClosedException channel is already closed. Execute(Node<T>, IGoal<T>, Nullable<Int32>) Execute a list of action traced from the goal node. Declaration public UniTask<bool> Execute(Node<T> goalNode, IGoal<T> goal, int? executionLength = default(int? )) Parameters Type Name Description Node <T> goalNode Goal node from the planner. IGoal <T> goal Goal of the agent. Nullable < Int32 > executionLength Maximum number of an action that will get executed before the execution stop. Returns Type Description Cysharp.Threading.Tasks.UniTask < Boolean > True if execution is successful, false if an action fail or interruption is requested. Exceptions Type Condition ArgumentOutOfRangeException Execution length is negative InterruptPlan() Stop the current plan and wait for a plan to stop. Declaration public UniTask InterruptPlan() Returns Type Description Cysharp.Threading.Tasks.UniTask Exceptions Type Condition InvalidOperationException Agent does not execute any action. Cysharp.Threading.Tasks.ChannelClosedException The interrupt channel is already closed. RequestForInterruption() Stop the current plan without waiting. Declaration public void RequestForInterruption() Exceptions Type Condition InvalidOperationException Agent does not execute any action. Cysharp.Threading.Tasks.ChannelClosedException The interrupt channel is already closed. TryCompleteInterruptChannel() Complete and close interruption channel Declaration public bool TryCompleteInterruptChannel() Returns Type Description Boolean True if channel is closed successfully."
  },
  "api/Tamato.GaifaGoap.PlannerSettings.html": {
    "href": "api/Tamato.GaifaGoap.PlannerSettings.html",
    "title": "Class PlannerSettings | Gaifa API documentation",
    "keywords": "Class PlannerSettings Settings for IPlanner<T> Inheritance Object PlannerSettings Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax [Serializable] public class PlannerSettings Fields heuristicMultiplier Multiplier use to adjust the heuristic value to match the cost. Declaration public float heuristicMultiplier Field Value Type Description Single iterationLimit Max number of iteration allowed, if exceed, the planner will stop. Declaration public int iterationLimit Field Value Type Description Int32 iterationPerFrame Max number of iteration per frame. Declaration public int iterationPerFrame Field Value Type Description Int32 nodeExpansionLimit Max number of expansion allowed, if exceed, the planner will stop. Declaration public int nodeExpansionLimit Field Value Type Description Int32 poolSize Size of the pool that use to cache objects by planner. Declaration public int poolSize Field Value Type Description Int32"
  },
  "api/Tamato.GaifaGoap.PlannerStats.html": {
    "href": "api/Tamato.GaifaGoap.PlannerStats.html",
    "title": "Struct PlannerStats | Gaifa API documentation",
    "keywords": "Struct PlannerStats Statistic information of planning process. Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public struct PlannerStats Constructors PlannerStats(PlannerStatus, Int32, Int32) Declaration public PlannerStats(PlannerStatus status, int iterationNumber, int nodeExpansionNumber) Parameters Type Name Description PlannerStatus status Int32 iterationNumber Int32 nodeExpansionNumber Fields IterationNumber Iteration that the planner consume in this call. Declaration public readonly int IterationNumber Field Value Type Description Int32 NodeExpansionNumber Number of expansion that planner cause in this call. Declaration public readonly int NodeExpansionNumber Field Value Type Description Int32 Status Planner status when the planner exited. Declaration public readonly PlannerStatus Status Field Value Type Description PlannerStatus Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Tamato.GaifaGoap.PlannerStatus.html": {
    "href": "api/Tamato.GaifaGoap.PlannerStatus.html",
    "title": "Enum PlannerStatus | Gaifa API documentation",
    "keywords": "Enum PlannerStatus Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public enum PlannerStatus Fields Name Description Canceled GoalUnreachable IterationExceeded NodeExceeded Success"
  },
  "api/Tamato.GaifaGoap.PlannerType.html": {
    "href": "api/Tamato.GaifaGoap.PlannerType.html",
    "title": "Enum PlannerType | Gaifa API documentation",
    "keywords": "Enum PlannerType Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public enum PlannerType Fields Name Description MultiFramePlanner ThreadPoolPlanner"
  },
  "api/Tamato.GaifaGoap.Pool.html": {
    "href": "api/Tamato.GaifaGoap.Pool.html",
    "title": "Class Pool | Gaifa API documentation",
    "keywords": "Class Pool Methods to create object pool Inheritance Object Pool Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public static class Pool Methods Create<T>(IPooledObjectPolicy<T>, Nullable<Int32>) Create an object pool. Declaration public static ObjectPool<T> Create<T>(IPooledObjectPolicy<T> policy = null, int? maximumRetain = default(int? )) where T : class, new() Parameters Type Name Description IPooledObjectPolicy <T> policy The pooling policy to use. Nullable < Int32 > maximumRetain The maximum number of objects to retain in the pool. Returns Type Description ObjectPool <T> Type Parameters Name Description T Pooled Object Create<T>(Action<T>, Nullable<Int32>) Create an object pool. Declaration public static ObjectPool<T> Create<T>(Action<T> onReturn, int? maximumRetain = default(int? )) where T : class, new() Parameters Type Name Description Action <T> onReturn Action that invoke when item return to the pool. Nullable < Int32 > maximumRetain The maximum number of objects to retain in the pool. Returns Type Description ObjectPool <T> Type Parameters Name Description T Pooled Object Create<T>(Func<T>, Action<T>, Nullable<Int32>) Create an object pool. Declaration public static ObjectPool<T> Create<T>(Func<T> createFactory, Action<T> onReturn = null, int? maximumRetain = default(int? )) where T : class Parameters Type Name Description Func <T> createFactory Func that invoke to create item. Action <T> onReturn Action that invoke when item return to the pool. Nullable < Int32 > maximumRetain The maximum number of objects to retain in the pool. Returns Type Description ObjectPool <T> Type Parameters Name Description T Pooled Object"
  },
  "api/Tamato.GaifaGoap.ReturnOnlyPooledObjectPolicy-1.html": {
    "href": "api/Tamato.GaifaGoap.ReturnOnlyPooledObjectPolicy-1.html",
    "title": "Class ReturnOnlyPooledObjectPolicy<T> | Gaifa API documentation",
    "keywords": "Class ReturnOnlyPooledObjectPolicy<T> Pooled Object Policy that accept delegate for Return(T) method Inheritance Object PooledObjectPolicy <T> ReturnOnlyPooledObjectPolicy<T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class ReturnOnlyPooledObjectPolicy<T> : PooledObjectPolicy<T>, IPooledObjectPolicy<T> where T : class, new() Type Parameters Name Description T Pooled Object Constructors ReturnOnlyPooledObjectPolicy(Action<T>) Declaration public ReturnOnlyPooledObjectPolicy(Action<T> onReturn) Parameters Type Name Description Action <T> onReturn Methods Create() Declaration public override T Create() Returns Type Description T Overrides Microsoft.Extensions.ObjectPool.PooledObjectPolicy<T>.Create() Return(T) Declaration public override bool Return(T obj) Parameters Type Name Description T obj Returns Type Description Boolean Overrides Microsoft.Extensions.ObjectPool.PooledObjectPolicy<T>.Return(T)"
  },
  "api/Tamato.GaifaGoap.SerializableTimespan.html": {
    "href": "api/Tamato.GaifaGoap.SerializableTimespan.html",
    "title": "Class SerializableTimespan | Gaifa API documentation",
    "keywords": "Class SerializableTimespan Wrapper for TimeSpan to make it serializable by Unity, as well as provide a custom inspector it. Inheritance Object SerializableTimespan Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax [Serializable] public class SerializableTimespan : ISerializationCallbackReceiver Constructors SerializableTimespan() Declaration public SerializableTimespan() SerializableTimespan(TimeSpan) Declaration public SerializableTimespan(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan Properties TimeSpan Declaration public TimeSpan TimeSpan { get; } Property Value Type Description TimeSpan Methods From(Double, TimeUnit) Declaration public static SerializableTimespan From(double value, TimeUnit timeUnit) Parameters Type Name Description Double value TimeUnit timeUnit Returns Type Description SerializableTimespan OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Operators Explicit(TimeSpan to SerializableTimespan) Declaration public static explicit operator SerializableTimespan(TimeSpan t) Parameters Type Name Description TimeSpan t Returns Type Description SerializableTimespan Implicit(SerializableTimespan to TimeSpan) Declaration public static implicit operator TimeSpan(SerializableTimespan st) Parameters Type Name Description SerializableTimespan st Returns Type Description TimeSpan"
  },
  "api/Tamato.GaifaGoap.ThreadPoolPlanner-1.html": {
    "href": "api/Tamato.GaifaGoap.ThreadPoolPlanner-1.html",
    "title": "Class ThreadPoolPlanner<T> | Gaifa API documentation",
    "keywords": "Class ThreadPoolPlanner<T> ThreadPoolPlanner is a planner that shift the work to the thread pool, so it won't halt the main thread and cause drop the FPS. Inheritance Object ThreadPoolPlanner<T> Implements IPlanner <T> Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public class ThreadPoolPlanner<T> : IPlanner<T> where T : class, IModel<T> Type Parameters Name Description T Model Remarks Since the planning process is happen on another thread, therefore APIs that require the main thread (most of Unity APIs) will throw an exception when called in TakeAction(T) method. Constructors ThreadPoolPlanner(PlannerSettings, Func<T>) Declaration public ThreadPoolPlanner(PlannerSettings defaultSettings, Func<T> modelFactory) Parameters Type Name Description PlannerSettings defaultSettings Func <T> modelFactory Properties DefaultSettings Gets a planner's default setting Declaration public PlannerSettings DefaultSettings { get; } Property Value Type Description PlannerSettings IsPlanning Gets a value indicate whether the planner is busy or not. Declaration public bool IsPlanning { get; } Property Value Type Description Boolean Methods Cancel() Cancel the planner and wait for it. Declaration public UniTask Cancel() Returns Type Description Cysharp.Threading.Tasks.UniTask Exceptions Type Condition InvalidOperationException Planner is idle. Plan(T, List<IGameAction<T>>, IGoal<T>, PlannerSettings) Create a plan. Declaration public UniTask<(Node<T> goalNode, PlannerStats stats)> Plan(T initialModel, List<IGameAction<T>> possibleActions, IGoal<T> goal, PlannerSettings settings = null) Parameters Type Name Description T initialModel Model of the current world state. List < IGameAction <T>> possibleActions List of possible actions for the agent. IGoal <T> goal Goal of the agent. PlannerSettings settings If provided, the planner's default settings will be overriden with this settings for this call only. Returns Type Description Cysharp.Threading.Tasks.UniTask < ValueTuple < Node <T>, PlannerStats >> (goalNode, stats) goalNode = node that satisfy the goal. stats = statistic information of a planner. Implements IPlanner<T>"
  },
  "api/Tamato.GaifaGoap.TimeUnit.html": {
    "href": "api/Tamato.GaifaGoap.TimeUnit.html",
    "title": "Enum TimeUnit | Gaifa API documentation",
    "keywords": "Enum TimeUnit Namespace : Tamato.GaifaGoap Assembly : Tamato.GaifaGoap.dll Syntax public enum TimeUnit Fields Name Description Days Hours Milliseconds Minutes Seconds"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Gaifa (Game AI Framework) API Documentation | Gaifa API documentation",
    "keywords": "Welcome to Gaifa (Game AI Framework) API Documentation"
  }
}