### YamlMime:ManagedReference
items:
- uid: Tamato.GaifaGoap.IGameAction`1
  commentId: T:Tamato.GaifaGoap.IGameAction`1
  id: IGameAction`1
  parent: Tamato.GaifaGoap
  children:
  - Tamato.GaifaGoap.IGameAction`1.ActionName
  - Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition
  - Tamato.GaifaGoap.IGameAction`1.RunAction(`0,Tamato.GaifaGoap.InterruptReceiver,System.Threading.CancellationToken)
  - Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
  langs:
  - csharp
  - vb
  name: IGameAction<T>
  nameWithType: IGameAction<T>
  fullName: Tamato.GaifaGoap.IGameAction<T>
  type: Interface
  source:
    remote:
      path: Runtime/AIAgent/IGameAction.cs
      branch: main
      repo: https://github.com/Arsxen/GaifaGoap.git
    id: IGameAction
    path: ../Assets/GaifaGoap/Runtime/AIAgent/IGameAction.cs
    startLine: 11
  assemblies:
  - Tamato.GaifaGoap
  namespace: Tamato.GaifaGoap
  summary: "\nAction of the agent\n"
  example: []
  syntax:
    content: >-
      public interface IGameAction<in T>
          where T : class, IModel<T>
    typeParameters:
    - id: T
      description: Model
    content.vb: Public Interface IGameAction(Of In T As {Class, IModel(Of T)})
  nameWithType.vb: IGameAction(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T)
  name.vb: IGameAction(Of T)
- uid: Tamato.GaifaGoap.IGameAction`1.ActionName
  commentId: P:Tamato.GaifaGoap.IGameAction`1.ActionName
  id: ActionName
  parent: Tamato.GaifaGoap.IGameAction`1
  langs:
  - csharp
  - vb
  name: ActionName
  nameWithType: IGameAction<T>.ActionName
  fullName: Tamato.GaifaGoap.IGameAction<T>.ActionName
  type: Property
  source:
    remote:
      path: Runtime/AIAgent/IGameAction.cs
      branch: main
      repo: https://github.com/Arsxen/GaifaGoap.git
    id: ActionName
    path: ../Assets/GaifaGoap/Runtime/AIAgent/IGameAction.cs
    startLine: 16
  assemblies:
  - Tamato.GaifaGoap
  namespace: Tamato.GaifaGoap
  summary: "\nGets a name of this action.\n"
  example: []
  syntax:
    content: string ActionName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ActionName As String
  overload: Tamato.GaifaGoap.IGameAction`1.ActionName*
  nameWithType.vb: IGameAction(Of T).ActionName
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).ActionName
- uid: Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
  commentId: M:Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
  id: TakeAction(`0)
  parent: Tamato.GaifaGoap.IGameAction`1
  langs:
  - csharp
  - vb
  name: TakeAction(T)
  nameWithType: IGameAction<T>.TakeAction(T)
  fullName: Tamato.GaifaGoap.IGameAction<T>.TakeAction(T)
  type: Method
  source:
    remote:
      path: Runtime/AIAgent/IGameAction.cs
      branch: main
      repo: https://github.com/Arsxen/GaifaGoap.git
    id: TakeAction
    path: ../Assets/GaifaGoap/Runtime/AIAgent/IGameAction.cs
    startLine: 26
  assemblies:
  - Tamato.GaifaGoap
  namespace: Tamato.GaifaGoap
  summary: "\nCheck if the model&apos;s state can satisfy the precondition, then Transform the model&apos;s state based on the effect of this action.\n"
  example: []
  syntax:
    content: (bool success, float cost) TakeAction(T model)
    parameters:
    - id: model
      type: '{T}'
      description: ''
    return:
      type: System.ValueTuple{System.Boolean,System.Single}
      description: >
        (Success, Cost)

        Success = True if state satisfy the precondition and state is changed, otherwise false.

        Cost = cost of this action, it&apos;s ignored if success is false.
    content.vb: Function TakeAction(model As T) As(success As Boolean, cost As Single)
  overload: Tamato.GaifaGoap.IGameAction`1.TakeAction*
  nameWithType.vb: IGameAction(Of T).TakeAction(T)
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).TakeAction(T)
- uid: Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition
  commentId: M:Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition
  id: CheckContextPrecondition
  parent: Tamato.GaifaGoap.IGameAction`1
  langs:
  - csharp
  - vb
  name: CheckContextPrecondition()
  nameWithType: IGameAction<T>.CheckContextPrecondition()
  fullName: Tamato.GaifaGoap.IGameAction<T>.CheckContextPrecondition()
  type: Method
  source:
    remote:
      path: Runtime/AIAgent/IGameAction.cs
      branch: main
      repo: https://github.com/Arsxen/GaifaGoap.git
    id: CheckContextPrecondition
    path: ../Assets/GaifaGoap/Runtime/AIAgent/IGameAction.cs
    startLine: 32
  assemblies:
  - Tamato.GaifaGoap
  namespace: Tamato.GaifaGoap
  summary: "\nCheck if current world state satisfy real-time precondition.\n"
  example: []
  syntax:
    content: bool CheckContextPrecondition()
    return:
      type: System.Boolean
      description: ''
    content.vb: Function CheckContextPrecondition As Boolean
  overload: Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition*
  nameWithType.vb: IGameAction(Of T).CheckContextPrecondition()
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).CheckContextPrecondition()
- uid: Tamato.GaifaGoap.IGameAction`1.RunAction(`0,Tamato.GaifaGoap.InterruptReceiver,System.Threading.CancellationToken)
  commentId: M:Tamato.GaifaGoap.IGameAction`1.RunAction(`0,Tamato.GaifaGoap.InterruptReceiver,System.Threading.CancellationToken)
  id: RunAction(`0,Tamato.GaifaGoap.InterruptReceiver,System.Threading.CancellationToken)
  parent: Tamato.GaifaGoap.IGameAction`1
  langs:
  - csharp
  - vb
  name: RunAction(T, InterruptReceiver, CancellationToken)
  nameWithType: IGameAction<T>.RunAction(T, InterruptReceiver, CancellationToken)
  fullName: Tamato.GaifaGoap.IGameAction<T>.RunAction(T, Tamato.GaifaGoap.InterruptReceiver, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: Runtime/AIAgent/IGameAction.cs
      branch: main
      repo: https://github.com/Arsxen/GaifaGoap.git
    id: RunAction
    path: ../Assets/GaifaGoap/Runtime/AIAgent/IGameAction.cs
    startLine: 41
  assemblies:
  - Tamato.GaifaGoap
  namespace: Tamato.GaifaGoap
  summary: "\nExecute this action.\n"
  example: []
  syntax:
    content: UniTask<bool> RunAction(T model, InterruptReceiver interruptReceiver, CancellationToken onDestroyCancellationToken)
    parameters:
    - id: model
      type: '{T}'
      description: Model after execute <xref href="Tamato.GaifaGoap.IGameAction%601.TakeAction(%600)" data-throw-if-not-resolved="false"></xref> method.
    - id: interruptReceiver
      type: Tamato.GaifaGoap.InterruptReceiver
      description: Receiver use to receive plan interruption signal from external source.
    - id: onDestroyCancellationToken
      type: System.Threading.CancellationToken
      description: Token use to cancel this action when the agent is destroyed.
    return:
      type: Cysharp.Threading.Tasks.UniTask{System.Boolean}
      description: True if the action execute successfully, otherwise false.
    content.vb: Function RunAction(model As T, interruptReceiver As InterruptReceiver, onDestroyCancellationToken As CancellationToken) As UniTask(Of Boolean)
  overload: Tamato.GaifaGoap.IGameAction`1.RunAction*
  nameWithType.vb: IGameAction(Of T).RunAction(T, InterruptReceiver, CancellationToken)
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).RunAction(T, Tamato.GaifaGoap.InterruptReceiver, System.Threading.CancellationToken)
references:
- uid: Tamato.GaifaGoap
  commentId: N:Tamato.GaifaGoap
  name: Tamato.GaifaGoap
  nameWithType: Tamato.GaifaGoap
  fullName: Tamato.GaifaGoap
- uid: Tamato.GaifaGoap.IGameAction`1.ActionName*
  commentId: Overload:Tamato.GaifaGoap.IGameAction`1.ActionName
  name: ActionName
  nameWithType: IGameAction<T>.ActionName
  fullName: Tamato.GaifaGoap.IGameAction<T>.ActionName
  nameWithType.vb: IGameAction(Of T).ActionName
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).ActionName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Tamato.GaifaGoap.IGameAction`1.TakeAction*
  commentId: Overload:Tamato.GaifaGoap.IGameAction`1.TakeAction
  name: TakeAction
  nameWithType: IGameAction<T>.TakeAction
  fullName: Tamato.GaifaGoap.IGameAction<T>.TakeAction
  nameWithType.vb: IGameAction(Of T).TakeAction
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).TakeAction
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ValueTuple{System.Boolean,System.Single}
  commentId: T:System.ValueTuple{System.Boolean,System.Single}
  parent: System
  isExternal: true
  name: ValueTuple<Boolean, Single>
  nameWithType: ValueTuple<Boolean, Single>
  fullName: System.ValueTuple<System.Boolean, System.Single>
  nameWithType.vb: ValueTuple(Of Boolean, Single)
  fullName.vb: System.ValueTuple(Of System.Boolean, System.Single)
  name.vb: ValueTuple(Of Boolean, Single)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition*
  commentId: Overload:Tamato.GaifaGoap.IGameAction`1.CheckContextPrecondition
  name: CheckContextPrecondition
  nameWithType: IGameAction<T>.CheckContextPrecondition
  fullName: Tamato.GaifaGoap.IGameAction<T>.CheckContextPrecondition
  nameWithType.vb: IGameAction(Of T).CheckContextPrecondition
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).CheckContextPrecondition
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
  commentId: M:Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
  name: TakeAction(T)
  nameWithType: IGameAction<T>.TakeAction(T)
  fullName: Tamato.GaifaGoap.IGameAction<T>.TakeAction(T)
  nameWithType.vb: IGameAction(Of T).TakeAction(T)
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).TakeAction(T)
  spec.csharp:
  - uid: Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
    name: TakeAction
    nameWithType: IGameAction<T>.TakeAction
    fullName: Tamato.GaifaGoap.IGameAction<T>.TakeAction
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Tamato.GaifaGoap.IGameAction`1.TakeAction(`0)
    name: TakeAction
    nameWithType: IGameAction(Of T).TakeAction
    fullName: Tamato.GaifaGoap.IGameAction(Of T).TakeAction
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Tamato.GaifaGoap.IGameAction`1.RunAction*
  commentId: Overload:Tamato.GaifaGoap.IGameAction`1.RunAction
  name: RunAction
  nameWithType: IGameAction<T>.RunAction
  fullName: Tamato.GaifaGoap.IGameAction<T>.RunAction
  nameWithType.vb: IGameAction(Of T).RunAction
  fullName.vb: Tamato.GaifaGoap.IGameAction(Of T).RunAction
- uid: Tamato.GaifaGoap.InterruptReceiver
  commentId: T:Tamato.GaifaGoap.InterruptReceiver
  parent: Tamato.GaifaGoap
  name: InterruptReceiver
  nameWithType: InterruptReceiver
  fullName: Tamato.GaifaGoap.InterruptReceiver
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Cysharp.Threading.Tasks.UniTask{System.Boolean}
  commentId: T:Cysharp.Threading.Tasks.UniTask{System.Boolean}
  parent: Cysharp.Threading.Tasks
  definition: Cysharp.Threading.Tasks.UniTask`1
  name: UniTask<Boolean>
  nameWithType: UniTask<Boolean>
  fullName: Cysharp.Threading.Tasks.UniTask<System.Boolean>
  nameWithType.vb: UniTask(Of Boolean)
  fullName.vb: Cysharp.Threading.Tasks.UniTask(Of System.Boolean)
  name.vb: UniTask(Of Boolean)
  spec.csharp:
  - uid: Cysharp.Threading.Tasks.UniTask`1
    name: UniTask
    nameWithType: UniTask
    fullName: Cysharp.Threading.Tasks.UniTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cysharp.Threading.Tasks.UniTask`1
    name: UniTask
    nameWithType: UniTask
    fullName: Cysharp.Threading.Tasks.UniTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Cysharp.Threading.Tasks.UniTask`1
  commentId: T:Cysharp.Threading.Tasks.UniTask`1
  isExternal: true
  name: UniTask<T>
  nameWithType: UniTask<T>
  fullName: Cysharp.Threading.Tasks.UniTask<T>
  nameWithType.vb: UniTask(Of T)
  fullName.vb: Cysharp.Threading.Tasks.UniTask(Of T)
  name.vb: UniTask(Of T)
  spec.csharp:
  - uid: Cysharp.Threading.Tasks.UniTask`1
    name: UniTask
    nameWithType: UniTask
    fullName: Cysharp.Threading.Tasks.UniTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Cysharp.Threading.Tasks.UniTask`1
    name: UniTask
    nameWithType: UniTask
    fullName: Cysharp.Threading.Tasks.UniTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Cysharp.Threading.Tasks
  commentId: N:Cysharp.Threading.Tasks
  isExternal: true
  name: Cysharp.Threading.Tasks
  nameWithType: Cysharp.Threading.Tasks
  fullName: Cysharp.Threading.Tasks
